{
    "docs": [
        {
            "location": "/", 
            "text": "WelpBatchBundle\n\n\nSymfony Bundle to manage batch operation. You can choose whatever broker you want (default is RabbitMq)\n\n\nFull Documentation\n\n\nyou can find the full documentation at \nhttps://welpdev.github.io/batchoperation-bundle/", 
            "title": "Index"
        }, 
        {
            "location": "/#welpbatchbundle", 
            "text": "Symfony Bundle to manage batch operation. You can choose whatever broker you want (default is RabbitMq)", 
            "title": "WelpBatchBundle"
        }, 
        {
            "location": "/#full-documentation", 
            "text": "you can find the full documentation at  https://welpdev.github.io/batchoperation-bundle/", 
            "title": "Full Documentation"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nInstall the bundle\n\n\nAdd bundle to your project:\n\n\ncomposer require batchOperation-bundle\n\n\n\nAdd \nWelp\\BatchBundle\\WelpBatchBundle\n to your \nAppKernel.php\n:\n\n\n$bundles = [\n    // ...\n    new Welp\\BatchBundle\\WelpBatchBundle(),\n];\n\n\n\nExtends the models\n\n\nIn order to use this bundle, you have to extends our models : \nWelp\\BatchBundle\\Model\\Batch\n\n\nExample :\n\n\n/**\n * @ORM\\Entity()\n * @ORM\\Table(name=\nbatch\n)\n * @ORM\\HasLifecycleCallbacks\n */\nclass Batch extends BaseBatch\n{\n\n    /**\n     * @var int\n     *\n     * @ORM\\Id\n     * @ORM\\Column(type=\ninteger\n)\n     * @ORM\\GeneratedValue(strategy=\nAUTO\n)\n     * @Serializer\\Groups({\nDefault\n})\n     * @Serializer\\Expose\n     */\n    protected $id;\n\n    /**\n     * @var string\n     *\n     * @ORM\\Column(name=\nstatus\n, type=\nstring\n, length=255)\n     * @Serializer\\Groups({\nDefault\n})\n     * @Serializer\\Expose\n     */\n    protected $status;\n\n    /**\n     * @var string\n     *\n     * @ORM\\OneToMany(targetEntity=\nOperation\n, mappedBy=\nbatch\n, cascade={\npersist\n, \nremove\n})\n     * @Serializer\\Groups({\nDefault\n})\n     * @Serializer\\Expose\n     *\n     */\n    protected $operations;\n\n    /**\n     * @var integer\n     *\n     * @ORM\\Column(name=\ntotal_operations\n, type=\ninteger\n)\n     * @Serializer\\Groups({\nDefault\n})\n     * @Serializer\\Expose\n     */\n    protected $totalOperations;\n\n    /**\n     * @var string\n     *\n     * @ORM\\Column(name=\ntotal_executed_operations\n, type=\ninteger\n)\n     * @Serializer\\Groups({\nDefault\n})\n     * @Serializer\\Expose\n     */\n    protected $totalExecutedOperations;\n\n    /**\n     * @var string\n     *\n     * @ORM\\Column(name=\nerrors\n, type=\narray\n)\n     * @Serializer\\Groups({\nDefault\n})\n     * @Serializer\\Expose\n     */\n    protected $errors;\n\n    /**\n     * @var \\DateTime\n     *\n     * @ORM\\Column(name=\ncreated_at\n, type=\ndatetime\n)\n     * @Serializer\\Groups({\nDefault\n})\n     * @Serializer\\Expose\n     */\n    protected $createdAt;\n\n    /**\n     * @var \\DateTime\n     *\n     * @ORM\\Column(name=\nupdated_at\n, type=\ndatetime\n,nullable=true)\n     * @Serializer\\Groups({\nDefault\n})\n     * @Serializer\\Expose\n     */\n    protected $updatedAt;\n\n    /**\n     * @var \\DateTime\n     *\n     * @ORM\\Column(name=\nstarted_at\n, type=\ndatetime\n,nullable=true)\n     * @Serializer\\Groups({\nDefault\n})\n     * @Serializer\\Expose\n     */\n    protected $startedAt;\n\n    /**\n     * @var \\DateTime\n     *\n     * @ORM\\Column(name=\nfinished_at\n, type=\ndatetime\n,nullable=true)\n     * @Serializer\\Groups({\nDefault\n})\n     * @Serializer\\Expose\n     */\n    protected $finishedAt;\n}\n\n\n\nConfiguration\n\n\ntake a look \nhere\n to configure the bundle", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#install-the-bundle", 
            "text": "Add bundle to your project:  composer require batchOperation-bundle  Add  Welp\\BatchBundle\\WelpBatchBundle  to your  AppKernel.php :  $bundles = [\n    // ...\n    new Welp\\BatchBundle\\WelpBatchBundle(),\n];", 
            "title": "Install the bundle"
        }, 
        {
            "location": "/installation/#extends-the-models", 
            "text": "In order to use this bundle, you have to extends our models :  Welp\\BatchBundle\\Model\\Batch  Example :  /**\n * @ORM\\Entity()\n * @ORM\\Table(name= batch )\n * @ORM\\HasLifecycleCallbacks\n */\nclass Batch extends BaseBatch\n{\n\n    /**\n     * @var int\n     *\n     * @ORM\\Id\n     * @ORM\\Column(type= integer )\n     * @ORM\\GeneratedValue(strategy= AUTO )\n     * @Serializer\\Groups({ Default })\n     * @Serializer\\Expose\n     */\n    protected $id;\n\n    /**\n     * @var string\n     *\n     * @ORM\\Column(name= status , type= string , length=255)\n     * @Serializer\\Groups({ Default })\n     * @Serializer\\Expose\n     */\n    protected $status;\n\n    /**\n     * @var string\n     *\n     * @ORM\\OneToMany(targetEntity= Operation , mappedBy= batch , cascade={ persist ,  remove })\n     * @Serializer\\Groups({ Default })\n     * @Serializer\\Expose\n     *\n     */\n    protected $operations;\n\n    /**\n     * @var integer\n     *\n     * @ORM\\Column(name= total_operations , type= integer )\n     * @Serializer\\Groups({ Default })\n     * @Serializer\\Expose\n     */\n    protected $totalOperations;\n\n    /**\n     * @var string\n     *\n     * @ORM\\Column(name= total_executed_operations , type= integer )\n     * @Serializer\\Groups({ Default })\n     * @Serializer\\Expose\n     */\n    protected $totalExecutedOperations;\n\n    /**\n     * @var string\n     *\n     * @ORM\\Column(name= errors , type= array )\n     * @Serializer\\Groups({ Default })\n     * @Serializer\\Expose\n     */\n    protected $errors;\n\n    /**\n     * @var \\DateTime\n     *\n     * @ORM\\Column(name= created_at , type= datetime )\n     * @Serializer\\Groups({ Default })\n     * @Serializer\\Expose\n     */\n    protected $createdAt;\n\n    /**\n     * @var \\DateTime\n     *\n     * @ORM\\Column(name= updated_at , type= datetime ,nullable=true)\n     * @Serializer\\Groups({ Default })\n     * @Serializer\\Expose\n     */\n    protected $updatedAt;\n\n    /**\n     * @var \\DateTime\n     *\n     * @ORM\\Column(name= started_at , type= datetime ,nullable=true)\n     * @Serializer\\Groups({ Default })\n     * @Serializer\\Expose\n     */\n    protected $startedAt;\n\n    /**\n     * @var \\DateTime\n     *\n     * @ORM\\Column(name= finished_at , type= datetime ,nullable=true)\n     * @Serializer\\Groups({ Default })\n     * @Serializer\\Expose\n     */\n    protected $finishedAt;\n}", 
            "title": "Extends the models"
        }, 
        {
            "location": "/installation/#configuration", 
            "text": "take a look  here  to configure the bundle", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/", 
            "text": "Configuration\n\n\nIn your \nconfig.yml\n:\n\n\nFull Configuration\n\n\nwelp_batch:\n    entity_manager: doctrine.orm.entity_manager #name of the entity manager service\n    broker_type: rabbitmq #type of the broker\n    broker_connection: default #name of the connection to the broker\n    batch_entity: MyBundle\\Entity\\Batch #entity which extends the batch Model\n    batch_results_folder: %kernel.root_dir%/../batch-results/ #Folder where we store the results files\n        batch: MyBundle\\Entity\\Batch\n        operation: MyBundle\\Entity\\Operation\n    manage_entities: #Batchable entity\n        need:\n            entity_name: MyBundle\\Entity\\Need\n            form_name: MyBundle\\Form\\NeedType\n            batch_size: 10\n            actions: ['create','delete']\n        proposition:\n            entity_name: MyBundle\\Entity\\Proposition\n            form_name: MyBundle\\Form\\PropositionType\n            batch_size: 10\n            actions: ['create']\n\n\n\nManage_entitites explanation\n\n\nYou can add as many entities as you like. Each of them must have the following attributes :\n\n\n\n\nentity_name : full name of the entity\n\n\nform_name : full name of the form corresponding to this entity. This form will be used to bind the given parameters to the new entity (see section TODO for more details)\n\n\nactions : array of action. At the moment, we only support create and delete\n\n\nbatch_size : number of message to take from the queue at a time.", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#configuration", 
            "text": "In your  config.yml :", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#full-configuration", 
            "text": "welp_batch:\n    entity_manager: doctrine.orm.entity_manager #name of the entity manager service\n    broker_type: rabbitmq #type of the broker\n    broker_connection: default #name of the connection to the broker\n    batch_entity: MyBundle\\Entity\\Batch #entity which extends the batch Model\n    batch_results_folder: %kernel.root_dir%/../batch-results/ #Folder where we store the results files\n        batch: MyBundle\\Entity\\Batch\n        operation: MyBundle\\Entity\\Operation\n    manage_entities: #Batchable entity\n        need:\n            entity_name: MyBundle\\Entity\\Need\n            form_name: MyBundle\\Form\\NeedType\n            batch_size: 10\n            actions: ['create','delete']\n        proposition:\n            entity_name: MyBundle\\Entity\\Proposition\n            form_name: MyBundle\\Form\\PropositionType\n            batch_size: 10\n            actions: ['create']", 
            "title": "Full Configuration"
        }, 
        {
            "location": "/configuration/#manage_entitites-explanation", 
            "text": "You can add as many entities as you like. Each of them must have the following attributes :   entity_name : full name of the entity  form_name : full name of the form corresponding to this entity. This form will be used to bind the given parameters to the new entity (see section TODO for more details)  actions : array of action. At the moment, we only support create and delete  batch_size : number of message to take from the queue at a time.", 
            "title": "Manage_entitites explanation"
        }, 
        {
            "location": "/api/", 
            "text": "REST Controller\n\n\nPrincipe\n\n\nThis bundle provide a create method.\nWhen using our REST Controller, you have to call the POST /batches with a json like this\n\n\nBatches\n\n\nPOST\n\n\nNote : All operations have to have those 3 parameters (type, action, payload)\n\n\nRoute\n\n\nPOST /batches\n\n\nRequest parameters\n\n\n{\n    \noperations\n:[{\n        \ntype\n:\nneed\n,\n        \naction\n:\ncreate\n,\n        \npayload\n:{\n            \nplace\n:{\nsearchedBy\n:\nroute\n,\nroute\n:\nRue de Dunkerque\n,\nlocality\n:\nParis\n,\nadministrativeArealevel1\n:\n\u00cele-de-France\n,\ncountry\n:\nFrance\n,\nname\n:\nRue de Dunkerque, Paris, France\n,\nlatitude\n:48.8807242, \nlongitude\n:2.351648399999931},\n            \ndescription\n:\nle test du batch du need2\n,\n            \ntitle\n:\nle test du batch du need2\n,\n            \ncategory\n:11,\n            \nauthor\n:2\n        }\n    },{\n        \ntype\n:\nproposition\n,\n        \naction\n:\ncreate\n,\n        \npayload\n:{\n            \nplace\n:{\nsearchedBy\n:\nroute\n,\nroute\n:\nRue de Dunkerque\n,\nlocality\n:\nParis\n,\nadministrativeArealevel1\n:\n\u00cele-de-France\n,\ncountry\n:\nFrance\n,\nname\n:\nRue de Dunkerque, Paris, France\n,\nlatitude\n:48.8807242, \nlongitude\n:2.351648399999931},\n            \ndescription\n:\nle test du batch du need2\n,\n            \ntitle\n:\nle test du batch du need2\n,\n            \ncategory\n:11,\n            \nauthor\n:2\n        }\n    }]\n}\n\n\n\nResponse\n\n\n{\n  \nsuccess\n: true,\n  \nbatch\n: {\n    \nid\n: 43,\n    \nstatus\n: \nwelp_batch_pending\n,\n    \noperations\n: [\n      {\n        \ntype\n: \nneed\n,\n        \naction\n: \ncreate\n,\n        \npayload\n: {\n          \nplace\n: {\n            \nsearchedBy\n: \nroute\n,\n            \nroute\n: \nRue de Dunkerque\n,\n            \nlocality\n: \nParis\n,\n            \nadministrativeArealevel1\n: \n\u00cele-de-France\n,\n            \ncountry\n: \nFrance\n,\n            \nname\n: \nRue de Dunkerque, Paris, France\n,\n            \nlatitude\n: 48.8807242,\n            \nlongitude\n: 2.3516483999999\n          },\n          \ndescription\n: \nle test du batch du need2\n,\n          \ntitle\n: \nle test du batch du need2\n,\n          \ncategory\n: 11,\n          \nauthor\n: 2\n        },\n        \noperationId\n: 1\n      },\n      {\n        \ntype\n: \nproposition\n,\n        \naction\n: \ncreate\n,\n        \npayload\n: {\n          \nplace\n: {\n            \nsearchedBy\n: \nroute\n,\n            \nroute\n: \nRue de Dunkerque\n,\n            \nlocality\n: \nParis\n,\n            \nadministrativeArealevel1\n: \n\u00cele-de-France\n,\n            \ncountry\n: \nFrance\n,\n            \nname\n: \nRue de Dunkerque, Paris, France\n,\n            \nlatitude\n: 48.8807242,\n            \nlongitude\n: 2.3516483999999\n          },\n          \ndescription\n: \nle test du batch du need2\n,\n          \ntitle\n: \nle test du batch du need2\n,\n          \ncategory\n: 11,\n          \nauthor\n: 2\n        },\n        \noperationId\n: 2\n      }\n    ],\n    \ntotal_operations\n: 2,\n    \ntotal_executed_operations\n: 0,\n    \ncreated_at\n: \n2017-02-21T18:26:46+0100\n,\n    \nupdated_at\n: \n2017-02-21T18:26:46+0100\n\n  }\n}\n\n\n\nGET\n\n\nRoute\n\n\nGET /batches/{id}\n\n\nResponse\n\n\n{\n  \nsuccess\n: true,\n  \nbatch\n: {\n    \nid\n: 43,\n    \nstatus\n: \nwelp_batch_pending\n,\n    \noperations\n: [\n      {\n        \ntype\n: \nneed\n,\n        \naction\n: \ncreate\n,\n        \npayload\n: {\n          \nplace\n: {\n            \nsearchedBy\n: \nroute\n,\n            \nroute\n: \nRue de Dunkerque\n,\n            \nlocality\n: \nParis\n,\n            \nadministrativeArealevel1\n: \n\u00cele-de-France\n,\n            \ncountry\n: \nFrance\n,\n            \nname\n: \nRue de Dunkerque, Paris, France\n,\n            \nlatitude\n: 48.8807242,\n            \nlongitude\n: 2.3516483999999\n          },\n          \ndescription\n: \nle test du batch du need2\n,\n          \ntitle\n: \nle test du batch du need2\n,\n          \ncategory\n: 11,\n          \nauthovdfvdfvdfvvvdvdsvdfsdfr\n: 2\n        },\n        \noperationId\n: 1\n      },\n      {\n        \ntype\n: \nneed\n,\n        \naction\n: \ncreate\n,\n        \npayload\n: {\n          \nplace\n: {\n            \nsearchedBy\n: \nroute\n,\n            \nroute\n: \nRue de Dunkerque\n,\n            \nlocality\n: \nParis\n,\n            \nadministrativeArealevel1\n: \n\u00cele-de-France\n,\n            \ncountry\n: \nFrance\n,\n            \nname\n: \nRue de Dunkerque, Paris, France\n,\n            \nlatitude\n: 48.8807242,\n            \nlongitude\n: 2.3516483999999\n          },\n          \ndescription\n: \nle test du batch du need2\n,\n          \ntitle\n: \nle test du batch du need2\n,\n          \ncategory\n: 11,\n          \nauthor\n: 2\n        },\n        \noperationId\n: 2\n      }\n    ],\n    \ntotal_operations\n: 2,\n    \ntotal_executed_operations\n: 0,\n    \ncreated_at\n: \n2017-02-21T18:26:46+0100\n,\n    \nupdated_at\n: \n2017-02-21T18:26:46+0100\n\n  }\n}\n\n\n\nDELETE\n\n\nRoute\n\n\nDELETE /batches/{id}\n\n\nResponse\n\n\n{\n  \nsuccess\n: true,\n  \nmessage\n: \nbatch deleted\n\n}\n\n\n\nResults\n\n\nThis route is dedicated to get the results from a given batch.\n\n\nGET\n\n\nROUTE\n\n\nGET /batches/{id}/results\n\n\nResponse\n\n\n{\n  \nsuccess\n: true,\n  \nfile\n: \n[{\\\noperationId\\\n:1,\\\nerror\\\n:true,\\\ntext\\\n:\\\nForm Error, check yout payload\\\n},{\\\noperationId\\\n:2,\\\nerror\\\n:false,\\\nmessage\\\n:\\\noperation OK\\\n}]\n\n}\n\n\n\nRessources\n\n\nWe also provide embedded documentation with NelmioApiDocBundle. If you use it, a Batches Section will automatically be imported to your documentation", 
            "title": "API"
        }, 
        {
            "location": "/api/#rest-controller", 
            "text": "", 
            "title": "REST Controller"
        }, 
        {
            "location": "/api/#principe", 
            "text": "This bundle provide a create method.\nWhen using our REST Controller, you have to call the POST /batches with a json like this", 
            "title": "Principe"
        }, 
        {
            "location": "/api/#batches", 
            "text": "", 
            "title": "Batches"
        }, 
        {
            "location": "/api/#post", 
            "text": "Note : All operations have to have those 3 parameters (type, action, payload)", 
            "title": "POST"
        }, 
        {
            "location": "/api/#route", 
            "text": "POST /batches", 
            "title": "Route"
        }, 
        {
            "location": "/api/#request-parameters", 
            "text": "{\n     operations :[{\n         type : need ,\n         action : create ,\n         payload :{\n             place :{ searchedBy : route , route : Rue de Dunkerque , locality : Paris , administrativeArealevel1 : \u00cele-de-France , country : France , name : Rue de Dunkerque, Paris, France , latitude :48.8807242,  longitude :2.351648399999931},\n             description : le test du batch du need2 ,\n             title : le test du batch du need2 ,\n             category :11,\n             author :2\n        }\n    },{\n         type : proposition ,\n         action : create ,\n         payload :{\n             place :{ searchedBy : route , route : Rue de Dunkerque , locality : Paris , administrativeArealevel1 : \u00cele-de-France , country : France , name : Rue de Dunkerque, Paris, France , latitude :48.8807242,  longitude :2.351648399999931},\n             description : le test du batch du need2 ,\n             title : le test du batch du need2 ,\n             category :11,\n             author :2\n        }\n    }]\n}", 
            "title": "Request parameters"
        }, 
        {
            "location": "/api/#response", 
            "text": "{\n   success : true,\n   batch : {\n     id : 43,\n     status :  welp_batch_pending ,\n     operations : [\n      {\n         type :  need ,\n         action :  create ,\n         payload : {\n           place : {\n             searchedBy :  route ,\n             route :  Rue de Dunkerque ,\n             locality :  Paris ,\n             administrativeArealevel1 :  \u00cele-de-France ,\n             country :  France ,\n             name :  Rue de Dunkerque, Paris, France ,\n             latitude : 48.8807242,\n             longitude : 2.3516483999999\n          },\n           description :  le test du batch du need2 ,\n           title :  le test du batch du need2 ,\n           category : 11,\n           author : 2\n        },\n         operationId : 1\n      },\n      {\n         type :  proposition ,\n         action :  create ,\n         payload : {\n           place : {\n             searchedBy :  route ,\n             route :  Rue de Dunkerque ,\n             locality :  Paris ,\n             administrativeArealevel1 :  \u00cele-de-France ,\n             country :  France ,\n             name :  Rue de Dunkerque, Paris, France ,\n             latitude : 48.8807242,\n             longitude : 2.3516483999999\n          },\n           description :  le test du batch du need2 ,\n           title :  le test du batch du need2 ,\n           category : 11,\n           author : 2\n        },\n         operationId : 2\n      }\n    ],\n     total_operations : 2,\n     total_executed_operations : 0,\n     created_at :  2017-02-21T18:26:46+0100 ,\n     updated_at :  2017-02-21T18:26:46+0100 \n  }\n}", 
            "title": "Response"
        }, 
        {
            "location": "/api/#get", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/api/#route_1", 
            "text": "GET /batches/{id}", 
            "title": "Route"
        }, 
        {
            "location": "/api/#response_1", 
            "text": "{\n   success : true,\n   batch : {\n     id : 43,\n     status :  welp_batch_pending ,\n     operations : [\n      {\n         type :  need ,\n         action :  create ,\n         payload : {\n           place : {\n             searchedBy :  route ,\n             route :  Rue de Dunkerque ,\n             locality :  Paris ,\n             administrativeArealevel1 :  \u00cele-de-France ,\n             country :  France ,\n             name :  Rue de Dunkerque, Paris, France ,\n             latitude : 48.8807242,\n             longitude : 2.3516483999999\n          },\n           description :  le test du batch du need2 ,\n           title :  le test du batch du need2 ,\n           category : 11,\n           authovdfvdfvdfvvvdvdsvdfsdfr : 2\n        },\n         operationId : 1\n      },\n      {\n         type :  need ,\n         action :  create ,\n         payload : {\n           place : {\n             searchedBy :  route ,\n             route :  Rue de Dunkerque ,\n             locality :  Paris ,\n             administrativeArealevel1 :  \u00cele-de-France ,\n             country :  France ,\n             name :  Rue de Dunkerque, Paris, France ,\n             latitude : 48.8807242,\n             longitude : 2.3516483999999\n          },\n           description :  le test du batch du need2 ,\n           title :  le test du batch du need2 ,\n           category : 11,\n           author : 2\n        },\n         operationId : 2\n      }\n    ],\n     total_operations : 2,\n     total_executed_operations : 0,\n     created_at :  2017-02-21T18:26:46+0100 ,\n     updated_at :  2017-02-21T18:26:46+0100 \n  }\n}", 
            "title": "Response"
        }, 
        {
            "location": "/api/#delete", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/api/#route_2", 
            "text": "DELETE /batches/{id}", 
            "title": "Route"
        }, 
        {
            "location": "/api/#response_2", 
            "text": "{\n   success : true,\n   message :  batch deleted \n}", 
            "title": "Response"
        }, 
        {
            "location": "/api/#results", 
            "text": "This route is dedicated to get the results from a given batch.", 
            "title": "Results"
        }, 
        {
            "location": "/api/#get_1", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/api/#route_3", 
            "text": "GET /batches/{id}/results", 
            "title": "ROUTE"
        }, 
        {
            "location": "/api/#response_3", 
            "text": "{\n   success : true,\n   file :  [{\\ operationId\\ :1,\\ error\\ :true,\\ text\\ :\\ Form Error, check yout payload\\ },{\\ operationId\\ :2,\\ error\\ :false,\\ message\\ :\\ operation OK\\ }] \n}", 
            "title": "Response"
        }, 
        {
            "location": "/api/#ressources", 
            "text": "We also provide embedded documentation with NelmioApiDocBundle. If you use it, a Batches Section will automatically be imported to your documentation", 
            "title": "Ressources"
        }, 
        {
            "location": "/explanation/", 
            "text": "Explanation\n\n\nThe purpose is to manage a very long list of create/delete for you entity. For this we follow these steps\n\n\n\n\nConfigure consumers/producers queue\n\n\nCall the batch_service with an array of operation\n\n\nCreate and save the batch\n\n\nfor each operations, create and save + send a message to the queue with the producer\n\n\nThe consumer take the message, and execute the given operation.\n\n\n\n\nConfigure consumers/producers queue\n\n\nWe automatically create a pair of producers/consumers for each actions of a manage_entity. if you take this example\n\n\n    manage_entities: #Batchable entity\n        need:\n            entity_name: AppBundle\\Entity\\Need\n            form_name: ApiBundle\\Form\\NeedType\n            batch_size: 10\n            actions: ['create','delete']\n        proposition:\n            entity_name: AppBundle\\Entity\\Proposition\n            form_name: ApiBundle\\Form\\PropositionType\n            batch_size: 10\n            actions: ['create']\n\n\n\nIt will automatically create queues named\n\n\n\n\nwelp.batch.need.create\n\n\nwelp.batch.need.delete\n\n\nwelp.batch.proposition.create\n\n\n\n\nIt will create consumer named\n\n\n\n\nold_sound_rabbit_mq.welp_batch.need.create_consumer\n\n\nold_sound_rabbit_mq.welp_batch.need.delete_consumer\n\n\nold_sound_rabbit_mq.welp_batch.proposition.create_consumer\n\n\n\n\nIt will create Producer named\n\n\n\n\nold_sound_rabbit_mq.welp_batch.need.create_producer\n\n\nold_sound_rabbit_mq.welp_batch.need.delete_producer\n\n\nold_sound_rabbit_mq.welp_batch.proposition.create_producer\n\n\n\n\nCall the batch_service\n\n\nThe service is called \nwelp_batch.batch_service\n. It is the main entrance to this bundle. You can use it in your controller, or you can use our REST controller.\n\n\nThis service provide a create method. This method accept an array parameter, which contain all the operations you want to batch.\nWhen using our REST Controller, you have to call the POST /batches with a json like this\n\n\n{\n    \noperations\n:[{\n        \ntype\n:\nneed\n,\n        \naction\n:\ncreate\n,\n        \npayload\n:{\n            \nplace\n:{\nsearchedBy\n:\nroute\n,\nroute\n:\nRue de Dunkerque\n,\nlocality\n:\nParis\n,\nadministrativeArealevel1\n:\n\u00cele-de-France\n,\ncountry\n:\nFrance\n,\nname\n:\nRue de Dunkerque, Paris, France\n,\nlatitude\n:48.8807242, \nlongitude\n:2.351648399999931},\n            \ndescription\n:\nle test du batch du need2\n,\n            \ntitldzdezdezdezddee\n:\nle test du batch du need2\n,\n            \ncategory\n:11,\n            \nauthor\n:2\n        }\n\n    },{\n        \ntype\n:\nneed\n,\n        \naction\n:\ncreate\n,\n        \npayload\n:{\n            \nplace\n:{\nsearchedBy\n:\nroute\n,\nroute\n:\nRue de Dunkerque\n,\nlocality\n:\nParis\n,\nadministrativeArealevel1\n:\n\u00cele-de-France\n,\ncountry\n:\nFrance\n,\nname\n:\nRue de Dunkerque, Paris, France\n,\nlatitude\n:48.8807242, \nlongitude\n:2.351648399999931},\n            \ndescription\n:\nle test du batch du need3\n,\n            \ntitldzdezdezdezddee\n:\nle test du batch du need3\n,\n            \ncategory\n:11,\n            \nauthor\n:2\n        }\n    }]\n}\n\n\n\nCreate and save the batch\n\n\nWith this example, it will add 2 operations to the queue \nwelp.batch.need.create\n\nWhen the service receive the request, it will create a batch.\n\n\nThen, for each operations (two in the given example), it will create and save operations.\nThose operations are transmit to the \nwelp_batch.producer\n thanks to the \nproduce\n method\n\n\nPublish to the broker\n\n\nWhen the \nproduce($operation, $batchId, $type, $action)\n method is called. The parameters will be add to an array formated like this :\n\n\n    $message = array();\n    $message['batchId']=$batchId;\n    $message['operationId']=$operation-\ngetId();\n    $message['operationPayload']=$operation-\ngetPayload()\n    $message['type']=$type;\n    $message['action']=$action;\n\n\n\nThis message will then be publish to rabbitMQ, using the right queue, determine with the type of the entity and the action\n\n\nExecute actions\n\n\nWe automatically create consumers connected to all our queues.\nYou have to add the consumers to your whatever you use to launch command.\n\n\nConsumers will get a message, and laucnh the \nexecute(AMQPMessage $msg)\n.\n\n\nThe message will be unserialized, and the operation will be executed. Following the given action, the create or the delete method will be used.\n\n\nUpdate batch/operation status\n\n\nDuring the process of the excution of the producers, we dispatch some events\n\n\n\n\nWELP_BATCH_OPERATION_STARTED\n\n\nWELP_BATCH_OPERATION_FINISHED\n\n\nWELP_BATCH_OPERATION_ERROR\n\n\n\n\nEvents are listened in the \nOperationListener.php\n.\n\n\nWhen the \nWELP_BATCH_OPERATION_STARTED\n event is raised, we update the status of the operation, and if necessary, the status of the batch.\n\n\nWhen the \nWELP_BATCH_OPERATION_ERROR\n event is raised, we update the status of the operation, and we add the code and the message of the error in the error array.\n\n\nWhen the \nWELP_BATCH_OPERATION_FINISHED\n event is raised, we update the status of the operation. If all operations are finished, we update the status of the batch, and we merge all errors in the batch error array.\n\n\nFormat Result\n\n\nAt the end of a batch, we automatically create a file names results-{batchId}-TodayDate. The file will be created in the given folder, the one you give in your configuration.", 
            "title": "Explanation"
        }, 
        {
            "location": "/explanation/#explanation", 
            "text": "The purpose is to manage a very long list of create/delete for you entity. For this we follow these steps   Configure consumers/producers queue  Call the batch_service with an array of operation  Create and save the batch  for each operations, create and save + send a message to the queue with the producer  The consumer take the message, and execute the given operation.", 
            "title": "Explanation"
        }, 
        {
            "location": "/explanation/#configure-consumersproducers-queue", 
            "text": "We automatically create a pair of producers/consumers for each actions of a manage_entity. if you take this example      manage_entities: #Batchable entity\n        need:\n            entity_name: AppBundle\\Entity\\Need\n            form_name: ApiBundle\\Form\\NeedType\n            batch_size: 10\n            actions: ['create','delete']\n        proposition:\n            entity_name: AppBundle\\Entity\\Proposition\n            form_name: ApiBundle\\Form\\PropositionType\n            batch_size: 10\n            actions: ['create']  It will automatically create queues named   welp.batch.need.create  welp.batch.need.delete  welp.batch.proposition.create   It will create consumer named   old_sound_rabbit_mq.welp_batch.need.create_consumer  old_sound_rabbit_mq.welp_batch.need.delete_consumer  old_sound_rabbit_mq.welp_batch.proposition.create_consumer   It will create Producer named   old_sound_rabbit_mq.welp_batch.need.create_producer  old_sound_rabbit_mq.welp_batch.need.delete_producer  old_sound_rabbit_mq.welp_batch.proposition.create_producer", 
            "title": "Configure consumers/producers queue"
        }, 
        {
            "location": "/explanation/#call-the-batch_service", 
            "text": "The service is called  welp_batch.batch_service . It is the main entrance to this bundle. You can use it in your controller, or you can use our REST controller.  This service provide a create method. This method accept an array parameter, which contain all the operations you want to batch.\nWhen using our REST Controller, you have to call the POST /batches with a json like this  {\n     operations :[{\n         type : need ,\n         action : create ,\n         payload :{\n             place :{ searchedBy : route , route : Rue de Dunkerque , locality : Paris , administrativeArealevel1 : \u00cele-de-France , country : France , name : Rue de Dunkerque, Paris, France , latitude :48.8807242,  longitude :2.351648399999931},\n             description : le test du batch du need2 ,\n             titldzdezdezdezddee : le test du batch du need2 ,\n             category :11,\n             author :2\n        }\n\n    },{\n         type : need ,\n         action : create ,\n         payload :{\n             place :{ searchedBy : route , route : Rue de Dunkerque , locality : Paris , administrativeArealevel1 : \u00cele-de-France , country : France , name : Rue de Dunkerque, Paris, France , latitude :48.8807242,  longitude :2.351648399999931},\n             description : le test du batch du need3 ,\n             titldzdezdezdezddee : le test du batch du need3 ,\n             category :11,\n             author :2\n        }\n    }]\n}", 
            "title": "Call the batch_service"
        }, 
        {
            "location": "/explanation/#create-and-save-the-batch", 
            "text": "With this example, it will add 2 operations to the queue  welp.batch.need.create \nWhen the service receive the request, it will create a batch.  Then, for each operations (two in the given example), it will create and save operations.\nThose operations are transmit to the  welp_batch.producer  thanks to the  produce  method", 
            "title": "Create and save the batch"
        }, 
        {
            "location": "/explanation/#publish-to-the-broker", 
            "text": "When the  produce($operation, $batchId, $type, $action)  method is called. The parameters will be add to an array formated like this :      $message = array();\n    $message['batchId']=$batchId;\n    $message['operationId']=$operation- getId();\n    $message['operationPayload']=$operation- getPayload()\n    $message['type']=$type;\n    $message['action']=$action;  This message will then be publish to rabbitMQ, using the right queue, determine with the type of the entity and the action", 
            "title": "Publish to the broker"
        }, 
        {
            "location": "/explanation/#execute-actions", 
            "text": "We automatically create consumers connected to all our queues.\nYou have to add the consumers to your whatever you use to launch command.  Consumers will get a message, and laucnh the  execute(AMQPMessage $msg) .  The message will be unserialized, and the operation will be executed. Following the given action, the create or the delete method will be used.", 
            "title": "Execute actions"
        }, 
        {
            "location": "/explanation/#update-batchoperation-status", 
            "text": "During the process of the excution of the producers, we dispatch some events   WELP_BATCH_OPERATION_STARTED  WELP_BATCH_OPERATION_FINISHED  WELP_BATCH_OPERATION_ERROR   Events are listened in the  OperationListener.php .  When the  WELP_BATCH_OPERATION_STARTED  event is raised, we update the status of the operation, and if necessary, the status of the batch.  When the  WELP_BATCH_OPERATION_ERROR  event is raised, we update the status of the operation, and we add the code and the message of the error in the error array.  When the  WELP_BATCH_OPERATION_FINISHED  event is raised, we update the status of the operation. If all operations are finished, we update the status of the batch, and we merge all errors in the batch error array.", 
            "title": "Update batch/operation status"
        }, 
        {
            "location": "/explanation/#format-result", 
            "text": "At the end of a batch, we automatically create a file names results-{batchId}-TodayDate. The file will be created in the given folder, the one you give in your configuration.", 
            "title": "Format Result"
        }
    ]
}